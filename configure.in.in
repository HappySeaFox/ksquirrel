#MIN_CONFIG(3.3)

AM_INIT_AUTOMAKE([ksquirrel], [0.7.0])

AM_PROG_AS

AC_CHECK_HEADER([math.h], [], AC_MSG_ERROR("ksquirrel needs math.h"))

AC_CHECK_HEADERS([limits.h stdlib.h unistd.h stdio.h], [], AC_MSG_ERROR("Some headers are missing"))
AC_CHECK_HEADER([setjmp.h], [], AC_MSG_ERROR("ksquirrel needs setjmp.h"))

PKG_CHECK_MODULES([ksquirrellibs], ksquirrellibs, [

        __cppflags=$CPPFLAGS

        CXXFLAGS="$ksquirrellibs_CFLAGS $CXXFLAGS"
        CPPFLAGS="$ksquirrellibs_CFLAGS $CPPFLAGS"

        AC_SUBST(ksquirrellibs_LIBS)

        AC_LANG_SAVE
        AC_LANG_CPLUSPLUS

        AC_CHECK_HEADERS([ksquirrel-libs/fileio.h], [],
                            [AC_MSG_ERROR([Ksquirrel-libs development files are not installed. Please install them first.])])

        # restore language & CPPFLAGS
        CPPFLAGS=${__cppflags}
        AC_LANG_RESTORE
                            ],
                [AC_MSG_ERROR([Ksquirrel-libs development file (.pc) is not installed. Please install ksquirrel-libs first.])]
)

KDE_CHECK_HEADER(konq_operations.h, [], AC_MSG_ERROR("Header file konq_operations.h is missing. Please install kdebase-devel package."))

# Checks for OpenGL.
AC_CHECK_HEADERS([GL/gl.h GL/glu.h], [], AC_MSG_ERROR("ksquirrel needs OpenGL (GL/gl.h, ...) and GLU (GL/glu.h) headers to be installed."))

AC_CHECK_LIB([GL], [glBegin], [LDFLAGS="-lGL $LDFLAGS"], [ogl="no"])

if test "x$ogl" = "xno"; then
    AC_MSG_NOTICE([Maybe libGL requires libpthread...])
    unset ac_cv_lib_GL_glBegin
    AC_CHECK_LIB([GL], [glBegin], [LDFLAGS="-lpthread -lGL $LDFLAGS"], AC_MSG_ERROR([Cannot use -lGL]), [-lpthread])
fi

##################### from gdk-pixbuf-0.22 #########################
#
# Checks to see if we should compile in MMX support (there will be
# a runtime test when the code is actually run to see if it should
# be used - this just checks if we can compile it.)
#
# This code is partially taken from Mesa
#
dnl Let people disable the MMX optimization
AC_ARG_ENABLE(mmx,
              [AS_HELP_STRING([--disable-mmx], [don't use MMX [default=auto]])],
	      [ enable_mmx="$enableval" ],
	      [ enable_mmx="auto" ]
             )

AC_MSG_CHECKING(for x86 platform)
  case $host_cpu in
    i386|i486|i586|i686|i786|k6|k7)
	use_x86_asm=yes
	;;
    *)
  	use_x86_asm=no
  esac
AC_MSG_RESULT($use_x86_asm)

dnl Are we going to use MMX extensions
use_mmx_asm=no

AC_MSG_CHECKING(compiler support for MMX)

if test x$enable_mmx = xauto ; then
  if test $use_x86_asm = yes; then
    save_ac_ext=$ac_ext
    ac_ext=S

    cp $srcdir/ksquirrel/libpixops/scale_line_22_33_mmx.S conftest.S
    if AC_TRY_EVAL(ac_compile); then
        use_mmx_asm=yes
    fi
    dnl rm -f conftest.[oS]

    ac_ext=$save_ac_ext
  fi

dnl Enforce usage of MMX extensions
elif test x$enable_mmx = xyes ; then
    use_mmx_asm=yes
else
    use_mmx_asm=no
fi

if test $use_mmx_asm = yes; then
  AC_DEFINE([USE_MMX], [], [Use MMX instructions])
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

AM_CONDITIONAL(USE_MMX, test x$use_mmx_asm = xyes)

# KIPI
have_kipi=no
PKG_CHECK_MODULES([libkipi], libkipi, [
        _cppflags=$CPPFLAGS
        _ldflags=$LDFLAGS
                                
        CPPFLAGS="$libkipi_CFLAGS $CPPFLAGS"
        LDFLAGS="$LDFLAGS $libkipi_LIBS"

        KDE_CHECK_HEADER(libkipi/interface.h, have_kipi=yes, have_kipi=no)
          if test "$have_kipi" = "yes"; then
        	AC_DEFINE(SQ_HAVE_KIPI, [], [If we have libkipi installed])
          else
            AC_WARN([Can't find KIPI headers, KSquirrel won't be compiled with KIPI support])
          fi

            CPPFLAGS=$_cppflags
            LDFLAGS=$_ldflags
    ],
        [AC_WARN([KIPI development file (.pc) was not found. KIPI support will be disabled.])]
)

AM_CONDITIONAL(SQ_HAVE_KIPI, test x$have_kipi = xyes)
